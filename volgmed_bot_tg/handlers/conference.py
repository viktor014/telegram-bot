from aiogram import Router, F, Bot
from config_reader import config
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards.keyboards import base_kb, conf_kb, modify_kb
from bot3 import Form
from typing import Any, Dict
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import sqlite3

router = Router()
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode=ParseMode.HTML)

editable_fields_conf = ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–¥–∞—Ç–∞", "–º–µ—Å—Ç–æ", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]

@router.message(F.text == "üß¨ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏")
@router.message(F.text.casefold() == "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏")
async def process_conference(message: Message, state: FSMContext) -> None:
    # # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    # connection = sqlite3.connect('new.db')
    # cursor = connection.cursor()
    #
    # # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # cursor.execute('INSERT INTO Users (username, email, age) VALUES (?, ?, ?)', ('newuser', 'newuser@example.com', 28))
    #
    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    # connection.commit()
    # connection.close()
    # await state.set_state(Form.confST)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=conf_kb()
    )


@router.message(F.text.casefold() == "–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é")
async def change_conference(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.changeST)
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ ID- –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(Form.changeST)
async def process_conf_name(message: Message, state: FSMContext) -> None:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('new.db')
    cursor = connection.cursor()

    cursor.execute('SELECT COUNT(*) FROM Conference')
    b = cursor.fetchone()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection.commit()
    connection.close()
    if message.text.isdigit():
        if int(message.text) <= b[0]:
            await state.set_state(Form.confST)
            await state.update_data(id_change_conf=message.text)
            await state.set_state(Form.changeST2)
            await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–ù–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –º–µ—Å—Ç–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ',
                                 reply_markup=ReplyKeyboardRemove(),
                                 )
        else:
            await message.answer(f'–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {b[0]} ')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏')
@router.message(Form.changeST2, F.text.casefold().in_(editable_fields_conf))
async def edit_conf(message: Message, state: FSMContext) -> None:
    if message.text.casefold() == '–Ω–∞–∑–≤–∞–Ω–∏–µ':
        await state.update_data(param_change_conf=2)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                             reply_markup=ReplyKeyboardRemove(),
                             )
    elif message.text.casefold() == '–¥–∞—Ç–∞':
        await state.update_data(param_change_conf=3)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                             reply_markup=ReplyKeyboardRemove(),
                             )
    elif message.text.casefold() == '–º–µ—Å—Ç–æ':
        await state.update_data(param_change_conf=4)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                             reply_markup=ReplyKeyboardRemove(),
                             )
    elif message.text.casefold() == '—Å—Ç–æ–∏–º–æ—Å—Ç—å':
        await state.update_data(param_change_conf=5)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                             reply_markup=ReplyKeyboardRemove(),
                             )
    elif message.text.casefold() == '–æ–ø–∏—Å–∞–Ω–∏–µ':
        await state.update_data(param_change_conf=6)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ',
                             reply_markup=ReplyKeyboardRemove(),
                             )
    elif message.text.casefold()== '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        await state.update_data(param_change_conf=7)
        await message.answer('–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                         reply_markup=ReplyKeyboardRemove(),
                         )
    await state.set_state(Form.changeST3)

@router.message(Form.changeST2)
async def edit_conf2(message: Message):
    await message.answer(
        text="–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –í–≤–µ–¥–∏—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –º–µ—Å—Ç–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )

@router.message(Form.changeST3)
async def edit_conf3(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        text=f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é —Å ID {data['id_change_conf']} –∏ –ø–æ–ª–µ–º {data['param_change_conf'] } –∏ –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ {message.text}"
    )


@router.message(F.text.casefold() == "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π")
async def read_conference(message: Message, state: FSMContext) -> None:
    await state.clear()
    conn = sqlite3.connect('new.db')
    cur = conn.cursor()
    cur.execute('SELECT * FROM Conference')
    a = cur.fetchall()
    info = ''
    for i in a:
        info += f'\nID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[0]}\n' \
                f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[3]}\n' \
                f'–î–∞—Ç—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[4]}\n' \
                f'–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[5]}\n' \
                f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[6]}\n' \
                f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[7]}\n' \
                f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {i[8]}\n\n'
    cur.close()
    conn.close()
    await message.answer(info, reply_markup=modify_kb())


@router.message(F.text.casefold() == "–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é")
async def add_conference(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.name_confST)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(Form.name_confST)
async def process_conf_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name_conf=message.text)
    await state.set_state(Form.date_confST)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                         reply_markup=ReplyKeyboardRemove(),
                         )


@router.message(Form.date_confST)
async def process_conf_date(message: Message, state: FSMContext) -> None:
    await state.update_data(date_conf=message.text)
    await state.set_state(Form.location_confST)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                         reply_markup=ReplyKeyboardRemove(),
                         )


@router.message(Form.location_confST)
async def process_conf_location(message: Message, state: FSMContext) -> None:
    await state.update_data(location_conf=message.text)
    await state.set_state(Form.price_confST)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                         reply_markup=ReplyKeyboardRemove(),
                         )


@router.message(Form.price_confST)
async def process_conf_price(message: Message, state: FSMContext) -> None:
    await state.update_data(price_conf=message.text)
    await state.set_state(Form.description_confST)
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ',
                         reply_markup=ReplyKeyboardRemove(),
                         )


@router.message(Form.description_confST)
async def process_conf_descriprion(message: Message, state: FSMContext) -> None:
    await state.update_data(description_conf=message.text)
    await state.update_data(id_user=message.from_user.id)
    await state.set_state(Form.pic_confST)
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏( –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–æ–π): ',
                         reply_markup=ReplyKeyboardRemove(),
                         )


@router.message(Form.pic_confST)
async def process_conf_pic(message: Message, state: FSMContext) -> None:
    data = await state.update_data(pic_conf=message.text)
    await process_publ(message=message, data=data)


async def process_publ(message: Message, data: Dict[str, Any]) -> None:
    builder = InlineKeyboardBuilder()
    builder.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='send_conf')
    await message.answer(f'\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["name_conf"]}\n' \
                         f'–î–∞—Ç—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["date_conf"]}\n' \
                         f'–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["location_conf"]}\n' \
                         f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["price_conf"]}\n' \
                         f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["description_conf"]}\n' \
                         f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["pic_conf"]}\n\n',
                         reply_markup=builder.as_markup()
                         )


@router.callback_query(F.data == "send_conf")
async def send_conf(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg = await bot.send_message(-1001910687841, f'\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["name_conf"]}\n' \
                                           f'–î–∞—Ç—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["date_conf"]}\n' \
                                           f'–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["location_conf"]}\n' \
                                           f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["price_conf"]}\n' \
                                           f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["description_conf"]}\n' \
     
                                           f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {data["pic_conf"]}\n\n')
    print(msg.message_id)

    data = await state.update_data(msg_id=msg.message_id)
    await add_bd_conf(data=data)
    await state.clear()
    await callback.answer(
        text='–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
        show_alert=True
    )

    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ',
                                  reply_markup=base_kb())


async def add_bd_conf(data: Dict[str, Any]) -> None:
    id_user = data["id_user"]
    id_msg_conf = data["msg_id"]
    name_conf = data["name_conf"]
    date_conf = data["date_conf"]
    location_conf = data["location_conf"]
    price_conf = data["price_conf"]
    description_conf = data["description_conf"]
    pic_conf = data["pic_conf"]
    conn = sqlite3.connect('new.db')
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO Conference (id_user_conf, id_publ_msg, name_conf, date_conf,location_conf, price_conf, description_conf, pic_conf)"
        "VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (
            id_user, id_msg_conf, name_conf, date_conf, location_conf, price_conf,
            description_conf, pic_conf))
    conn.commit()
    cur.close()
    conn.close()
